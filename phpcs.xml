<?xml version="1.0"?>
<ruleset name="Swat">
  <arg name="colors"/>
  <arg name="tab-width" value="4"/>
  <arg name="extensions" value="php"/>
  <arg name="encoding" value="utf-8"/>
  <arg name="warning-severity" value="0"/>
  <arg value="p" /><!-- show progress -->

  <file>./Swat</file>
  <file>./SwatDB</file>
  <file>./SwatI18N</file>

  <rule ref="PSR2"/>

  <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
    <severity>0</severity>
  </rule>

  <!-- Required for prettier formatting. Allows breaking default argument
       assignment across multiple lines. -->
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceAfterEquals">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Functions.MultiLineFunctionDeclaration.Indent">
    <severity>0</severity>
  </rule>

  <!-- Required for prettier formatting. -->
  <rule ref="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace">
    <severity>0</severity>
  </rule>

  <rule ref="Generic.Classes.DuplicateClassName"/>

  <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
  <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
  <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

  <rule ref="Generic.Commenting.Fixme"/>
  <rule ref="Generic.Commenting.Todo"/>

  <!-- PSR-2 allows line length of 120, we keep 80 and let the auto-formatter
       figure out how to wrap long lines -->
  <rule ref="Generic.Files.LineLength">
    <properties>
      <property name="lineLimit" value="80"/>
      <property name="absoluteLineLimit" value="100"/>
    </properties>
  </rule>
  <rule ref="Generic.Files.OneClassPerFile"/>
  <rule ref="Generic.Files.OneInterfacePerFile"/>
  <rule ref="Generic.Files.OneTraitPerFile"/>

  <rule ref="Generic.Formatting.SpaceAfterCast"/>

  <rule ref="Generic.Functions.CallTimePassByReference"/>

  <!-- rule ref="Generic.Metrics.CyclomaticComplexity"/ -->
  <rule ref="Generic.Metrics.NestingLevel"/>

  <rule ref="Generic.NamingConventions.ConstructorName"/>

  <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
  <rule ref="Generic.PHP.DeprecatedFunctions"/>
  <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>
  <rule ref="Generic.PHP.DisallowShortOpenTag"/>
  <rule ref="Generic.PHP.ForbiddenFunctions">
    <properties>
      <property name="forbiddenFunctions" type="array" value="sizeof=>count,delete=>unset,print=>echo,strcmp=>==,var_dump=>'',strlen=>mb_strlen,strpos=>mb_strpos,strrpos=>mb_strrpos,substr=>mb_substr,strtolower=>mb_strtolower,strtoupper=>mb_strtoupper,stripos=>mb_stripos,strstr=>mb_strstr,stristr=>mb_stristr,strrchr=>mb_strrchr,substr_count=>mb_substr_count,substr_replace=>''" />
    </properties>
  </rule>
  <rule ref="Generic.PHP.NoSilencedErrors"/>
  <rule ref="Generic.PHP.Syntax"/>


  <rule ref="Squiz.Classes.SelfMemberReference"/>

  <rule ref="Generic.CodeAnalysis.EmptyStatement"/>

  <!-- We allow empty catch statements -->
  <rule ref="Generic.CodeAnalysis.EmptyStatement.DetectedCatch">
    <severity>0</severity>
  </rule>

  <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>

  <rule ref="Squiz.Operators.ValidLogicalOperators"/>

  <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
  <rule ref="Squiz.PHP.Eval">
    <severity>5</severity>
  </rule>
  <rule ref="Squiz.PHP.GlobalKeyword"/>
  <rule ref="Squiz.PHP.InnerFunctions"/>
  <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
  <rule ref="Squiz.PHP.NonExecutableCode"/>

  <rule ref="Squiz.Scope.MemberVarScope"/>
  <rule ref="Squiz.Scope.MethodScope"/>
  <rule ref="Squiz.Scope.StaticThisUsage"/>

  <rule ref="Squiz.Strings.EchoedStrings"/>

  <rule ref="Squiz.WhiteSpace.CastSpacing"/>

  <!-- Custom sniff that forces file names to match the class declared in them.
       Customized for silverorange to ignore the rule if /admin/components/ is
       present in the file path
  -->
  <rule ref="SilverorangeLegacy.Classes.ClassFileName"/>
</ruleset>
